---
# tasks file for odoo_role

- name: Check if target directory exists
  stat:
    path: "{{ target_dir }}"
  register: dir_check

- name: Set working directory
  set_fact:
    working_dir: "{{ target_dir if dir_check.stat.exists else fallback_dir }}"

- name: Display working directory
  debug:
    msg: "Le répertoire de travail est : {{ working_dir }}"
  
- name: Check if fuse module is loaded
  shell: lsmod | grep fuse
  register: fuse_loaded
  ignore_errors: yes

- name: Load fuse module if not loaded
  become: yes
  command: modprobe fuse
  when: fuse_loaded.rc != 0

- name: Install fuse-overlayfs
  become: yes
  package:
    name: fuse-overlayfs
    state: present
  when: ansible_os_family in ["Debian", "Ubuntu"]

- name: Check Docker version
  command: docker --version
  register: docker_version
  changed_when: false

- name: Set storage driver to overlay2 if supported
  become: yes
  lineinfile:
    path: /etc/docker/daemon.json
    line: '  "storage-driver": "overlay2"'
    create: yes
  when: docker_version.stdout is version('18.09', '>=')
  notify: Restart Docker service

- name: Disable SELinux temporarily
  become: yes
  command: setenforce 0
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'
  ignore_errors: yes

- name: Check working directory permissions
  file:
    path: "{{ working_dir }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: yes

- name: Generate and start Docker Compose
  block:
    - name: "Generate docker compose file"
      template:
        src: "docker-compose-odoo.yml.j2"
        dest: "{{ working_dir }}/docker-compose-odoo.yml"
        mode: '0644'

    - name: "Start docker compose"
      command: "docker compose -f {{ working_dir }}/docker-compose-odoo.yml up -d"
  
  vars:
    ansible_become: yes  # Si vous avez besoin de privilèges élevés
  when: working_dir is defined

- name: Warn if fallback directory was used
  debug:
    msg: "Attention : Le répertoire de repli ({{ fallback_dir }}) a été utilisé car {{ target_dir }} n'existe pas."
  when: working_dir == fallback_dir
